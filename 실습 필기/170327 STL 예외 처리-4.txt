

===================
Mon Mar 27 20:52:06 2017
===================


// 2017 1 STL 17.3.27 월

#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

// 4장. 일반개념

// 4.3 예외처리 - 그림 4.1 표준예외의 계층구조
// 예외 - 모든 예외는 exception을 상속
// STL은 속도에 최우선, 예외는 필요하면 프로그래머가 따로 처리해야한다.
// (예외를 처리하지 않는다.)
//
// bad_alloc - 할당해줄 메모리가 없다.
// bad_cast - dynamic_cast가 실패했다.
//
// 호출가능객체


int main()
{
	vector<int> v{1, 2, 3, 4, 5};
	// v는 속도를 중시하는 코드로 이루어짐.
	// 만일 잘못된 범위를 검사하고 싶다면,
	// 시간이 더 걸리는 다른 버전의 함수를 사용해야함.

	// v[i] - 속도 버전 (빠름)
	// v.at(i) - 예외를 처리하는 버전 (느림)

	try {
		for (int i = 0; i < 6; ++i)
			cout << v.at(i) << endl;
	}
	catch ( exception& e ) {
		cout << e.what() << endl;
	}
	// try-catch
	// 정상적일땐 try에서 놀다가
	// 문제가 생기면 catch로 와서 예외 처리를 한다.

	save();
}