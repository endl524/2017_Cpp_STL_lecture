

===================
Tue Mar 28 18:02:53 2017
===================


// 2017 1 STL 17.3.28 화

#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

// 4장. 일반개념

// 4.3 예외처리 - 그림 4.1 표준예외의 계층구조
// 예외 - 모든 예외는 exception을 상속
// STL은 속도에 최우선, 예외는 필요하면 프로그래머가 따로 처리해야한다.
// (예외를 처리하지 않는다.)
//
// bad_alloc - 할당해줄 메모리가 없다.
// bad_cast - dynamic_cast가 실패했다.
//
// 호출가능객체


// dynamic_cast는 언제 실패하는가?

class Animal {
public:
	virtual void move() const = 0;
};

class Dog : public Animal {
public:
	virtual void move() const override final {
		cout << "개가 뛴다" << endl;
	};
};

class Bird : public Animal {
public:
	virtual void move() const override final {
		cout << "새가 난다" << endl;
	};
};


// RTTI 동작.
void f( Animal& p ) { // casting (형변환)
	Dog d = dynamic_cast<Dog&>(p); // 예외를 던진다.
	d.move();
}

int main()
{
	// int* p; '*'는 그냥 선언 가능.
	// int& r; '&'는 그냥 선언 불가 (반드시 무언가 있어야한다.)

	Animal* ap[]{ new Dog, new Bird, new Dog }; // 다형성(부모클래스를 이용해 자식클래스를 찾아가는것.)

	// 함수 f는 전달된 pointer가 Dog인 경우에만 move()를 호출

	for (int i = 0; i < 3; ++i) {
		try {
			f(*ap[i]);
		}
		catch (exception& e) {
			cout << e.what() << endl;
		}
	}
	save();
}