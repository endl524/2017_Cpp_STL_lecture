

===================
Mon Mar 13 20:43:26 2017
===================


// 2017 1 STL 17.3.6 월 (2주차 1강)

#include <iostream>
#include <random>
#include <algorithm>
#include <fstream>
#include "save.h"
using namespace std;

class Dog {
	int age;
public:
	void setAge(int n) { age = n; } // age를 넘겨주는 public 함수를 생성.
	int getAge() const { return age; } // age를 읽어주는 함수 생성.
};

bool xxx(const Dog&, const Dog&);

// 개 100 마리를 생성하여 나이 순으로 정렬하여 출력하라.
// sort()로 정렬하고, 나이는 random엔진을 사용하여 (0,20) 


// & (레퍼런스) 사용의 이유는 인자를 복사하지 말라는 뜻.
// 즉, 주소를 넘긴다.
// const (콘스트) 사용의 이유는 읽기만 하라는 뜻.

int main()
{
	Dog dogs[100];
	uniform_int_distribution<> ui(0, 20);
	default_random_engine dre;

	for(Dog& d: dogs)
		d.setAge(ui(dre)); // age를 넘겨주는 함수를 사용해주자.

	sort(begin(dogs), end(dogs), [](const Dog& a, const Dog& b) {
		return a.getAge() < b.getAge();
	}); // 정렬
		// (xxx의 사용이 sort에서 뿐이므로 "익명함수"(람다)로 사용해도 무관하다.)
		// (또는 오히려 훨씬 좋은 코딩이라 할 수 있다.)

	for (const Dog d : dogs) // a의 크기만큼 d (data) 에.. 
		cout << d.getAge() << "\t"; // age를 읽어주는 함수를 사용해주자.

	cout << endl;

	save();
}

bool xxx(const Dog& a, const Dog& b)
{
	return a.getAge() < b.getAge(); // 오름차순 (age를 읽어주는 함수를 사용해주자.)
}